//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Наталья\Desktop\project\Decompile\DeobfMineObf\1.12 stable mappings"!

//Decompiled by Procyon!

package ru.sanchez.micotian.module.exploit;

import ru.sanchez.micotian.utils.*;
import net.minecraft.client.network.*;
import net.minecraftforge.fml.common.gameevent.*;
import ru.sanchez.micotian.*;
import ru.sanchez.micotian.utils.commands.*;
import net.minecraftforge.fml.common.eventhandler.*;
import java.util.*;
import ru.sanchez.micotian.module.*;
import ru.sanchez.micotian.settings.*;
import net.minecraftforge.fml.relauncher.*;
import com.google.common.collect.*;
import net.minecraft.world.*;
import net.minecraft.scoreboard.*;

public class OfflineCheck extends Module
{
    private static NetHandlerPlayClient nethandlerplayclient;
    private static boolean flag;
    public TimerUtils timer;
    private static boolean flag_say;
    public static Set offlined;
    private static List list;
    private static Ordering ENTRY_ORDERING;
    
    public static String check(final String s) {
        if (OfflineCheck.list.isEmpty()) {
            ChatUtils.sendMessage("pls enable OfflineCheck");
            return null;
        }
        final Iterator<NetworkPlayerInfo> iterator = (Iterator<NetworkPlayerInfo>)OfflineCheck.list.iterator();
        if (!iterator.hasNext()) {
            return s + " offline";
        }
        if (Integer.valueOf(s.hashCode()).equals(iterator.next().getGameProfile().getName().hashCode())) {
            return s + " online";
        }
        return null;
    }
    
    public static List getList() {
        return OfflineCheck.list;
    }
    
    @SubscribeEvent
    public void onPlayerTick(final TickEvent.PlayerTickEvent playerTickEvent) {
        if (this.timer.isDelay((int)Micotian.instance.settingsManager.getSettingByName(this, "Time").getValDouble() * 1000L)) {
            OfflineCheck.nethandlerplayclient = OfflineCheck.mc.player.connection;
            OfflineCheck.ENTRY_ORDERING = Ordering.from((Comparator)new PlayerComparator(null));
            OfflineCheck.list = OfflineCheck.ENTRY_ORDERING.sortedCopy((Iterable)OfflineCheck.nethandlerplayclient.getPlayerInfoMap());
            for (final String str : CommandOffline.getNick()) {
                final Iterator<NetworkPlayerInfo> iterator2 = OfflineCheck.list.iterator();
                if (iterator2.hasNext()) {
                    if (!Integer.valueOf(iterator2.next().getGameProfile().getName().hashCode()).equals(str.hashCode())) {
                        // invokedynamic(8:(Z)V, true)
                        return;
                    }
                }
                // invokedynamic(7:(Z)V, false)
                // invokedynamic(8:(Z)V, false)
                if (invokedynamic(40:()Z) && !OfflineCheck.offlined.contains(str)) {
                    // invokedynamic(7:(Z)V, false)
                    OfflineCheck.offlined.add(str);
                }
                else {
                    if (!OfflineCheck.offlined.contains(str)) {
                        continue;
                    }
                    if (invokedynamic(40:()Z)) {
                        return;
                    }
                    // invokedynamic(7:(Z)V, false)
                    OfflineCheck.offlined.remove(str);
                    ChatUtils.sendMessage(str + " has come back online");
                }
                return;
            }
            if (OfflineCheck.offlined.size() == CommandOffline.getNick().size() && !invokedynamic(46:()Z) && OfflineCheck.offlined.size() != 0) {
                ChatUtils.sendMessage(OfflineCheck.offlined.toString() + " all offline");
            }
            // invokedynamic(7:(Z)V, true)
            this.timer.setLastMS();
        }
    }
    
    static {
        OfflineCheck.offlined = new HashSet();
    }
    // invokedynamic(8:(Z)V, false)
    // invokedynamic(7:(Z)V, false)
    
    public OfflineCheck() {
        super("OfflineCheck", Category.EXPLOIT);
        this.timer = new TimerUtils();
        Micotian.instance.settingsManager.rSetting(new Setting("Time", this, 1.0, 1.0, 600.0, true));
    }
    
    @Override
    public void onDisable() {
        OfflineCheck.offlined.clear();
        // invokedynamic(7:(Z)V, false)
        // invokedynamic(8:(Z)V, false)
        super.onDisable();
    }
    
    @SideOnly(Side.CLIENT)
    static class PlayerComparator implements Comparator
    {
        public int compare(final NetworkPlayerInfo networkPlayerInfo, final NetworkPlayerInfo networkPlayerInfo2) {
            final ScorePlayerTeam getPlayerTeam = networkPlayerInfo.getPlayerTeam();
            final ScorePlayerTeam getPlayerTeam2 = networkPlayerInfo2.getPlayerTeam();
            return ComparisonChain.start().compareTrueFirst(networkPlayerInfo.getGameType() != GameType.SPECTATOR, networkPlayerInfo2.getGameType() != GameType.SPECTATOR).compare((Comparable)((getPlayerTeam != null) ? getPlayerTeam.getName() : ""), (Comparable)((getPlayerTeam2 != null) ? getPlayerTeam2.getName() : "")).compare((Comparable)networkPlayerInfo.getGameProfile().getName(), (Comparable)networkPlayerInfo2.getGameProfile().getName()).result();
        }
        
        @Override
        public int compare(final Object o, final Object o2) {
            return this.compare((NetworkPlayerInfo)o, (NetworkPlayerInfo)o2);
        }
        
        PlayerComparator(final OfflineCheck$1 object) {
            this();
        }
        
        private PlayerComparator() {
        }
    }
}
