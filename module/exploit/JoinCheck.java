//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Наталья\Desktop\project\Decompile\DeobfMineObf\1.12 stable mappings"!

//Decompiled by Procyon!

package ru.sanchez.micotian.module.exploit;

import ru.sanchez.micotian.module.*;
import ru.sanchez.micotian.*;
import ru.sanchez.micotian.settings.*;
import net.minecraftforge.fml.common.gameevent.*;
import net.minecraft.client.network.*;
import net.minecraft.util.text.*;
import ru.sanchez.micotian.utils.*;
import java.util.*;
import net.minecraftforge.fml.common.eventhandler.*;
import net.minecraftforge.fml.relauncher.*;
import com.google.common.collect.*;
import net.minecraft.world.*;
import net.minecraft.scoreboard.*;

public class JoinCheck extends Module
{
    private static NetHandlerPlayClient nethandlerplayclient;
    public static Set old_list;
    private static Ordering ENTRY_ORDERING;
    public TimerUtils timer;
    public static Set new_list;
    private static List list;
    
    @Override
    public void onDisable() {
        try {
            JoinCheck.list.clear();
            JoinCheck.old_list.clear();
            JoinCheck.new_list.clear();
        }
        catch (Throwable t) {}
        super.onDisable();
    }
    
    public JoinCheck() {
        super("JoinCheck", Category.EXPLOIT);
        this.timer = new TimerUtils();
        Micotian.instance.settingsManager.rSetting(new Setting("Time", this, 1.0, 1.0, 600.0, true));
        Micotian.instance.settingsManager.rSetting(new Setting("Hi", this, false));
        Micotian.instance.settingsManager.rSetting(new Setting("Online", this, false));
    }
    
    static {
        JoinCheck.old_list = new HashSet();
        JoinCheck.new_list = new HashSet();
    }
    
    @SubscribeEvent
    public void onPlayerTick(final TickEvent.PlayerTickEvent playerTickEvent) {
        if (this.timer.isDelay((int)Micotian.instance.settingsManager.getSettingByName(this, "Time").getValDouble() * 1000L)) {
            if (JoinCheck.mc.world == null) {
                return;
            }
            JoinCheck.nethandlerplayclient = JoinCheck.mc.player.connection;
            JoinCheck.ENTRY_ORDERING = Ordering.from((Comparator)new PlayerComparator(null));
            JoinCheck.list = JoinCheck.ENTRY_ORDERING.sortedCopy((Iterable)JoinCheck.nethandlerplayclient.getPlayerInfoMap());
            final Iterator<NetworkPlayerInfo> iterator = JoinCheck.list.iterator();
            if (iterator.hasNext()) {
                JoinCheck.new_list.add(iterator.next().getGameProfile().getName());
                return;
            }
            int n = 0;
            if (n < JoinCheck.old_list.size()) {
                if (!JoinCheck.new_list.contains(JoinCheck.old_list.toArray()[n])) {
                    ChatUtils.sendMessage(JoinCheck.old_list.toArray()[n] + " " + TextFormatting.RED + "leave");
                    JoinCheck.old_list.remove(JoinCheck.old_list.toArray()[n]);
                    if (Micotian.instance.settingsManager.getSettingByName(this, "Online").getValBoolean()) {
                        ChatUtils.sendMessage("Online: " + TextFormatting.RED + JoinCheck.new_list.size());
                    }
                }
                ++n;
                return;
            }
            final Iterator<String> iterator2 = JoinCheck.new_list.iterator();
            if (iterator2.hasNext()) {
                final String s = iterator2.next();
                if (JoinCheck.old_list.contains(s)) {
                    return;
                }
                if (JoinCheck.old_list.isEmpty()) {
                    JoinCheck.old_list.addAll(JoinCheck.new_list);
                }
                else {
                    ChatUtils.sendMessage(s + " " + TextFormatting.GREEN + "join");
                    JoinCheck.old_list.add(s);
                    if (Micotian.instance.settingsManager.getSettingByName(this, "Hi").getValBoolean()) {
                        ChatUtils.say("Hi " + s);
                    }
                    if (!Micotian.instance.settingsManager.getSettingByName(this, "Online").getValBoolean()) {
                        return;
                    }
                    ChatUtils.sendMessage("Online: " + TextFormatting.GREEN + JoinCheck.new_list.size());
                    return;
                }
            }
            JoinCheck.new_list.clear();
            this.timer.setLastMS();
        }
    }
    
    @SideOnly(Side.CLIENT)
    static class PlayerComparator implements Comparator
    {
        @Override
        public int compare(final Object o, final Object o2) {
            return this.compare((NetworkPlayerInfo)o, (NetworkPlayerInfo)o2);
        }
        
        PlayerComparator(final JoinCheck$1 object) {
            this();
        }
        
        public int compare(final NetworkPlayerInfo networkPlayerInfo, final NetworkPlayerInfo networkPlayerInfo2) {
            final ScorePlayerTeam getPlayerTeam = networkPlayerInfo.getPlayerTeam();
            final ScorePlayerTeam getPlayerTeam2 = networkPlayerInfo2.getPlayerTeam();
            return ComparisonChain.start().compareTrueFirst(networkPlayerInfo.getGameType() != GameType.SPECTATOR, networkPlayerInfo2.getGameType() != GameType.SPECTATOR).compare((Comparable)((getPlayerTeam != null) ? getPlayerTeam.getName() : ""), (Comparable)((getPlayerTeam2 != null) ? getPlayerTeam2.getName() : "")).compare((Comparable)networkPlayerInfo.getGameProfile().getName(), (Comparable)networkPlayerInfo2.getGameProfile().getName()).result();
        }
        
        private PlayerComparator() {
        }
    }
}
